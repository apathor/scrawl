#!/bin/bash
# scrawl - Tagged temporary files.

# tp - time stamp
# print time with bash builtin
tp() { printf "%(${1:-%s})T\\n" "${2:--1}"; }

ti() {
    read -r -d '' use <<EOF
USAGE: ti [OPTIONS] INTERVAL
Parse and render temporal shorthand.

UNITS:                  | SCALES:
 s : second  d : day    |  D : 10e1  M : 10e6
 m : minute  w : week   |  H : 10e2  G : 10e9
 h : hour    y : year   |  K : 10e3  T : 10e12

MODES
 -a : after     : output date plus INTERVAL
 -b : before    : output date minus INTERVAL
 -c : numeric   : output integer number of seconds in INTERVAL
 -d : shorthand : output string shorthand of INTERVAL

OPTIONS
 -f FORMAT : render dates with given strftime FORMAT
 -t TIME   : calculate dates relative to TIME

SAMPLE
 1d        : 86400 | 1Ms    : 1000000
 43m20s    : 2600  | 3Kh    : 259200000
 18h12m16s : 65536 | 2Gy    : 63115200000000000

EOF
    # mark current time
    local now
    now=$(tp %s)
    # scale units
    declare -A scale
    scale=(
        ["D"]=$((10**1))
        ["H"]=$((10**2))
        ["K"]=$((10**3))
        ["M"]=$((10**6))
        ["G"]=$((10**9))
        ["T"]=$((10**12))
    )
    # time units
    declare -A unit
    unit=(
        ["y"]=31557600
        ["w"]=604800
        ["d"]=86400
        ["h"]=3600
        ["m"]=60
        ["s"]=1
    )
    # reverse lookup integer on scale
    # declare -A rscale
    # for key in "${!scale[@]}"; do rscale["${scale[$key]}"]="$key"; done
    # reverse lookup integer on unit
    declare -A runit
    for key in "${!unit[@]}"; do runit["${unit[$key]}"]="$key"; done
    # accept options
    local mode=4 fmt="%s" when="$now"
    local opt OPTIND OPTARG
    while getopts ":abcdf:hs:t:u:" opt; do
        case "$opt" in
            a) mode=1           ;; # output date after given interval
            b) mode=2           ;; # output date before given interval
            c) mode=3           ;; # output number of seconds in given interval
            d) mode=4           ;; # output shorthand string for given interval
            f) fmt="$OPTARG"    ;; # set format string for date output
            t) when="$OPTARG"   ;; # set relative unix timestamp for date calculation
            h) # help
                printf "%s\\n" "$use" >&2
                return
                ;;
            ?) # invalid?
                printf "Invalid option '%s'\\n%s\\n" "$OPTARG" "$use" >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND - 1))
    # accept arguments
    local inp="$*"
    if [ -z "$inp" ]; then
        printf "%s\\n" "$use" >&2
        return
    fi
    # decode input string into integer seconds
    local num="" char="" secs=0 mul=1 idx=0
    for ((idx=0; idx<="${#inp}"; idx++)); do
        char="${inp:$idx:1}"
        case "$char" in
            [[:digit:]]) # accumulate digits
                num="${num}${char}"
                ;;
            ["$(printf "%s" "${!scale[@]}")"]) # scale unit
                mul="${scale[$char]}"
                (( idx++ ))
                char="${inp:$idx:1}"
                ;&
            ["$(printf "%s" "${!unit[@]}")"]) # time unit
                if [ -z "$char" ] || [ -z "${unit[$char]+exists}" ] ; then
                    printf "Expected time unit not '%s' at index '%d'.\\n" "$char" "$idx" >&2
                    return 2
                fi
                num="${num:-1}"
                secs=$(( secs + (num * mul * unit["$char"]) ))
                num=""
                mul=1
                ;;
            ?) # dunno
                printf "Failed to parse character '%s' at '%d'.\\n" "$char" "$idx" >&2
                return 2
            ;;
        esac
    done <<< "$inp"
    if [ -n "$num" ]; then secs=$(( secs + num )); fi
    # encode an interval string
    local tstr="" left="$secs" per=0
    while read -r val; do
        per=$((left / val))
        left=$((left % val))
        if [[ "$per" -eq 0 ]]; then continue; fi
        tstr+="${per}${runit[$val]}"
    done < <(printf "%s\\n" "${unit[@]}" | sort -r -n)
    # output depends on mode
    case "$mode" in
        1) tp "$fmt" $(( when + secs )) ;;
        2) tp "$fmt" $(( when - secs )) ;;
        3) printf "%d\\n" "$secs" ;;
        4) printf "%s\\n" "$tstr" ;;
    esac
}

scrawl() {
    read -r -d '' use <<EOF
USAGE: scrawl [MODE] [OPTIONS]
Organize your text snippets with tagged temporary files.

MODES
  -A [TAG ...]       | add     | Add new entry with given tags.
  -D [TAG ...] INDEX | delete  | Delete entry at given index of matching entries.
  -E [TAG ...] INDEX | edit    | Edit entry at given index of matching entries.
  -G [TAG ...] INDEX | get     | Output entry at given index of matching entries.
  -L [TAG ...]       | list    | List indexed info of matching entries.
  -T [TAG ...]       | tags    | List all tags in matching entries.

OPTIONS
  -a EPOCHTIME  | after   | Select entries with ID after the given epoch time.
  -b EPOCHTIME  | before  | Select entries with ID before the given epoch time.
  -e            | encrypt | Encrypt a file with PGP.
  -i INTEGER    | id      | Select entries or make a new entry with the given ID.
  -r            | reverse | Reverse entry ID sort order.
  -s            | simple  | Output only the file name of matching entries.
  -t TAG        | tag     | Filter entries or make a new entry with the given tag.
  -y INTERVAL   | younger | Select entries files younger the given interval.
  -z INTERVAL   | older   | Select entries older than the given interval.

EXAMPLES
 # Add entries
  $ scrawl -A foo baz < <(fortune)
  $ curl -sS https://ietf.org | scrawl foo

 # Get entries
  $ scrawl -G -t foo 0
  $ scrawl -Gs foo 1

 # List entries
  $ scrawl -L -t baz
  $ scrawl -L -s foo | parallel grep -l ietf

 # List tags
  $ scrawl -T foo
EOF
    # working directory must exist and be writable
    declare sdir="${SCRAWL_DIR:-$HOME/.scrawl}"
    sdir="${sdir%%/}"
    if ! mkdir -p "$sdir" || ! [ -w "$sdir" ]; then
        printf "%s\\n" "Could not make or write to directory $sdir!" >&2
        return 1
    fi
    # record the current time
    local now
    now=$(tp)
    # local
    local editor="${EDITOR:-/usr/bin/sensible-editor}"
    # regular expressions
    local _int='^[0-9]+$'                                   # INTEGER
    local _pos='^[+-]?[0-9]+$'                              # +/-INTEGER
    local _tag='^[a-Z][a-Z0-9]*$'                           # TAG
    local _mine='^[0-9]+(_[a-Z][a-Z0-9]+)*$' # INTEGER(_TAG)*
    # declare some variables
    local mode exact reverse simple after before encrypt
    declare -a wtags
    # guess the program mode
    if ! [ -t 0 ]; then
        # add an entry when open on stdin
        mode="add"
    elif [[ "${*: -1}" =~ $_int ]]; then
        # get an entry given a numeric last argument
        mode="get"
    elif ! [ -t 1 ] || [ "$#" -gt 0 ]; then
        # list when open on stdout or given some arguments
        mode="list"
    else
        # help the user when run with no arguments or pipes
        mode="help"
    fi
    # accept options
    local opt OPTIND OPTARG
    while getopts ":ADEGHLTa:b:ehi:rst:y:z:" opt; do
        case "$opt" in
            # modes
            H|h) mode="help"   ;;
            A)   mode="add"    ;;
            D)   mode="delete" ;;
            E)   mode="edit"   ;;
            G)   mode="get"    ;;
            L)   mode="list"   ;;
            T)   mode="tags"   ;;
            # options
            a) ## future - select entries with IDs after now
                after="$OPTARG"
                if ! [[ "$after" =~ $_int ]]; then
                    printf "After filter be an integer epoch time.\\n" >&2
                    return 2
                fi
                ;;
            b) ## past - select entries with IDs before now
                before="$OPTARG"
                if ! [[ "$before" =~ $_int ]]; then
                    printf "Before filter must be an integer epoch time.\\n" >&2
                    return 2
                fi
                ;;
            e) ## encrypt
                encrypt="YES"
                ;;
            i) ## id INTEGER - select entries with given ID
                exact="$OPTARG"
                if ! [[ "$exact" =~ $_int ]]; then
                    printf "Entry ID must be an integer.\\n" >&2
                    return 2
                fi
                ;;
            r) ## reverse - reverse sort of entries
                reverse="YES"
                ;;
            s) ## simple - just print the path of selected entries
                simple="YES"
                ;;
            t) ## tag TAG_STRING - select entries with given tag ( multiple accepted )
                if ! [[ "$OPTARG" =~ $_tag ]]; then
                    printf "Invalid tag '%s'.\\n" "$OPTARG" >&2
                    return 2
                fi
                wtags+=("$OPTARG")
                ;;
            y) # select files younger than the given interval
                if ! after=$(ti -b "$OPTARG"); then
                    printf "Could not parse '%s' as a time interval.\\n" "$OPTARG" >&2
                    return 3
                fi
                ;;
            z) # select files older than than the given interval
                if ! before=$(ti -b "$OPTARG"); then
                    printf "Could not parse '%s' as a time interval.\\n" "$OPTARG" >&2
                    return 3
                fi
                ;;
            # an unexpected option was given
            \?)
                printf "Invalid option '%s'!\\n%s\\n" "$OPTARG" "$use" >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND - 1))
    # some modes accept any additional arguments as tags
    while [ "$#" -gt 0 ]; do
        if ! [[ "$1" =~ $_tag ]]; then break; fi
        wtags+=("$1")
        shift
    done
    # some modes filter existing entries
    declare -a hits
    local base="" len=0 found=0
    case "$mode" in get|edit|delete|list|tags)
        # consider each file in the working directory
        for file in "$sdir"/*; do
            # parse filename
            base="${file##*/}"
            base="${base%%\.*}"
            # skip files that dont match the format
            if ! [[ "$base" =~ $_mine ]]; then continue; fi
            # parse filename
            IFS='_' read -r id tags <<< "$base"
            # filter by time selection
            if [ -n "$exact" ]  && [ "$id" != "$exact" ];   then continue; fi
            if [ -n "$after"  ] && [ "$id" -lt "$after"  ]; then continue; fi
            if [ -n "$before" ] && [ "$id" -gt "$before" ]; then continue; fi
            # filter by tag
            found=0
            for tag in ${tags//_/ }; do
                for wtag in "${wtags[@]}"; do
                    if [ "${wtag,,}" == "${tag,,}" ]; then found=1; fi
                done
            done
            if [ "${#wtags[@]}" -ne 0 ] && [ "$found" -ne 1 ]; then continue 2; fi
            # push matching files
            hits+=("$file")
        done
        # record number of hits
        len="${#hits[@]}"
        # maybe reverse order of results
        if [ -z "$reverse" ]; then
            declare -a revs
            for ((x="$len" - 1; x >= 0; x--)); do revs+=("${hits[$x]}"); done
            hits=("${revs[@]}")
        fi
        ;;
    esac
    # select program mode
    local hit name path tmp
    case "$mode" in
        # help - write some usage text
        help)
            printf "%s\\n" "$use"
            return 0
            ;;
        # add - make a new entry
        add)
            # generate file names
            name="${exact:-$now}"
            if [ "${#wtags[@]}" -gt 0 ]; then
                name+="$(printf '_%s' "${wtags[@],,}")";
            fi
            path="$sdir/$name"
            tmp="/dev/shm/$name"
            # nothing on stdin?
            if [ -t 0 ]; then
                # edit interactively if possible
                if ! "$editor" "$tmp"; then return 3; fi
            else
                # write input out to entry
                printf "%s\\n" "$(< /dev/stdin)" > "$tmp"
            fi
            # ensure that a file was made
            if ! [ -f "$tmp" ]; then return 3; fi
            # create the new entry
            if [ -n "$encrypt" ]; then
                # encrypted
                path="$path.gpg"
                gpg -e -q -a < "$tmp" > "$path"
            else
                # plaintext
                printf "%s\\n" "$(< "$tmp")" > "$path"
            fi
            # clean up
            command rm "$tmp"
            # write out file path
            if [ -f "$path" ]; then printf "%s\\n" "$path"; fi
            ;;
        # get/edit/delete - manipulate a single entry
        get|edit|delete)
            # maybe nothing was found
            if [ "${len:-0}" -lt 1 ]; then
                printf "No entries found!\\n" >&2
                return 2
            fi
            # accept an integer index
            declare pick="${1:-0}"
            if ! [[ "$pick" =~ $_pos ]]; then
                printf "Get index must be +/- integer.\\n" >&2
                return 2
            fi
            # absolute index must be between 0 and the number of entries found
            if [ "${pick#-}" -gt "$(( len - 1 ))" ]; then
                printf "Max index is %s!\\n" "$(( len - 1 ))" >&2
                return 2
            fi
            # lookup file by index
            hit="${hits[$pick]}"
            # switch on mode
            case "$mode" in
                delete)
                    # delete that file
                    rm -i -v "$hit"
                    ;;
                edit)
                    # optionally decrypt the entry
                    tmp="$hit"
                    if [[ "$hit" == *.gpg ]]; then
                        encrypt="yes"
                        tmp="/dev/shm/${hit##*/}"
                        tmp="${tmp%%.gpg}"
                        if ! gpg -d -q < "$hit" > "$tmp"; then
                            command rm "$tmp"
                            return 1
                        fi
                    fi
                    # edit the entry
                    if ! "$editor" "$tmp"; then return 3; fi
                    # maybe re-encrypt
                    if [ -n "$encrypt" ]; then
                        gpg -e -q -a < "$tmp" > "${hit%%.gpg}.gpg"
                        command rm -v "$tmp"
                    fi
                    # write out file path
                    printf "%s\\n" "$hit"
                    ;;
                get)
                    # for simple output just write the path
                    if [ -n "$simple" ]; then
                        printf "%s\\n" "$hit"
                        return
                    fi
                    # write file contents, decrypting if necessary
                    if [[ "$hit" == *.gpg ]]; then
                        gpg -q -d < "$hit"
                    else
                        printf "%s\\n" "$(< "$hit")"
                    fi
                    ;;
            esac
            ;;
        # list - list matching entries
        list)
            # maybe nothing was found
            if [ "${len:-0}" -lt 1 ]; then
                printf "No entries found!\\n" >&2
                return 2
            fi
            # print each entry
            local index=0
            for hit in "${hits[@]}"; do
                if [ -n "$simple" ]; then
                    # simple format: FILENAME
                    printf "%s\\n" "$hit"
                else
                    # split file for attributes
                    name="${hit##*/}"
                    IFS='_' read -r id tags <<< "${name%%.*}"
                    age=$(( now - id ))
                    # render entry info - INDEX ID TIMESTAMP AGE TAGS
                    printf "% 4d %d %(%F %T)T %s %s\\n" \
                           "$index" "$id" "$id" "$(ti -d "$age")" "${tags//_/,}"
                fi
                ((index++));
            done
            ;;
        # tags - list tags in matching entries
        tags)
            declare -A all
            for hit in "${hits[@]}"; do
                base="${hit##*/}"
                IFS='_' read -r -a each <<< "${base%%.*}"
                for tag in "${each[@]:1}"; do
                    all["${tag,,}"]+=1
                done
            done
            printf "%s\\n" "${!all[@]}" | sort
            ;;
    esac
    return 0
}

# _scrawl - command completion for scrawl
_scrawl() {
    # scrawl has some modes
    declare -a modes
    modes=(-{A,D,E,G,L,T})
    # scrawl has some options
    local opt=""
    declare -A opts
    for opt in -{a,b,d,e,h,i,r,s,t}; do opts["$opt"]=0; done
    # scan all previous words
    local mode=""
    for word in "${COMP_WORDS[@]}"; do
        case "$word" in
            -A|-D|-G|-L|-T) mode="$word" ;;
            -a|-b|-e|-h|-i|-r|-s|-y|-z) unset opts["$word"] ;;
        esac
    done
    local cur="${COMP_WORDS[COMP_CWORD]}"
    # first maybe consider the previous word
    if [[ "$COMP_CWORD" -gt 1 ]]; then
        case "${COMP_WORDS[COMP_CWORD-1]}" in
            -a|-b)
                # for date options try to be helpful
                if [ -z "$cur" ]; then COMPREPLY=("\$(date +%s)"); fi
                return
                ;;
            -i) # for exact ID option complete existing IDs
                local i="" ids=()
                while read -r _ i _; do ids+=("$i"); done < <(scrawl -L)
                mapfile -t reply < <(compgen -W "${ids[*]}" -- "$cur")
                COMPREPLY=("${reply[@]}")
                return
                ;;
            -t) # for tag option complete on existing tags
                mapfile tags < <(scrawl -T)
                mapfile -t reply < <(compgen -W "${tags[*]} " -- "$cur")
                COMPREPLY=("${reply[@]}")
                return
                ;;
        esac
    fi
    # figure possible next words
    declare -a next
    # modes if one has not been given already
    if [ -z "$mode" ]; then
        next+=("${modes[@]}")
    fi
    # options
    if :; then # unless past option processing?
        next+=("${!opts[@]}")
    fi
    # complete on next tokens
    mapfile -t reply < <(compgen -S' ' -W "${next[*]}" -- "$cur")
    COMPREPLY=("${reply[@]}")
}
complete -F _scrawl scrawl

###
if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then scrawl "$@"; fi
